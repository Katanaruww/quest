from aiogram import Dispatcher, Bot
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3

storage = MemoryStorage()


class FSM(StatesGroup):
    fio = State()
    rank = State()
    one_station = State()
    two_station = State()
    three_station = State()
    four_station_1 = State()
    four_station_2 = State()
    five_station_1 = State()
    five_station_2 = State()
    six_station_1 = State()
    six_station_2 = State()
    seven_station = State()


bot = Bot("5606690486:AAGTtIzwK9837iNdA0PTQ17SzMWhSc2Ak1E")
katana = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('dat.db', check_same_thread=False)
cur = conn.cursor()
one_station = ["1", "2", "3", "1", "4", "3", "4", "1", "3", "2", "1", "1", "2", "4", "3", ]
two_station = ["—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ä–µ–∫–µ —É–≥—Ä–µ", "–∫—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞", "1793", "736", "556"]
three_station = ["–ü–µ—Ç—Ä I",
                 "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π",
                 "–î–º–∏—Ç—Ä–∏–π –î–æ–Ω—Å–∫–æ–π",
                 "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π",
                 "–ì–µ–æ—Ä–≥–∏–π –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á –ñ—É–∫–æ–≤",
                 "–ù–∏–∫–∏—Ç–∞ –°–µ—Ä–≥–µ–µ–≤–∏—á –•—Ä—É—â–µ–≤",
                 "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ II",
                 "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á –°—É–≤–æ—Ä–æ–≤",
                 "–ê–Ω–¥—Ä–µ–π –ê–Ω—É—Ñ—Ä–∏–µ–≤–∏—á –î—É–±–µ–Ω—Å–∫–∏–π"]
four_station = [
    ["–°–æ—Å–ª–æ–≤–∏—è", "–ù–µ–ø–æ–¥–∞—Ç–Ω—ã–µ", "–ü–æ–¥–∞—Ç–Ω—ã–µ", "–î–≤–æ—Ä—è–Ω—Å—Ç–≤–æ", "–î—É—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ", "–ö—Ä–µ—Å—Ç—å—è–Ω—Å—Ç–≤–æ", "–ú–µ—â–∞–Ω—Å—Ç–≤–æ", "–ö–∞–∑–∞—á–µ—Å—Ç–≤–æ",
     "–ß–µ—Ä–Ω–æ—Å–æ—à–Ω—ã–µ", "–í–ª–∞–¥–µ–ª—å—á–µ—Å–∫–∏–µ"],
    ["–ú–∞–Ω—É—Ñ–∞–∫—Ç—É—Ä–∞", "–°–æ—Å–ª–æ–≤–∏–µ", "–ë–∞—Ä—â–∏–Ω–∞", "–í–µ—á–µ", "–†–µ—Ñ–æ—Ä–º–∞"]]
five_station = [["–î", "–ë", "–ñ", "–í", "–ê", "–ì", "–ï"],
                ["–ê", "–ï", "–î", "–ë", "–î", "–ì", "–ï", "–í"]]
six_station = [["–∫—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞", "–º–µ–∂–¥—É –º–æ–Ω–∞—Ö–æ–º –°–µ—Ä–≥–∏–µ–º –†–∞–¥–æ–Ω–µ–∂—Å–∫–∏–º –∏ –∫–Ω—è–∑–µ–º –î–º–∏—Ç—Ä–∏–µ–º –ò–≤–∞–Ω–æ–≤–∏—á–µ–º",
                "–°–∫–∞–∑–∞–Ω–∏–µ –æ –ú–∞–º–∞–µ–≤–æ–º –ø–æ–±–æ–∏—â–µ"],
               ["–ú–∏–Ω–∏–Ω—É –∏ –ü–æ–∂–∞—Ä—Å–∫–æ–º—É", "–ö 200-–ª–µ—Ç–∏—é –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ú–æ—Å–∫–≤—ã –æ—Ç –ø–æ–ª—è–∫–æ–≤ –≤ 1613", "–ú–∞—Ä—Ç–æ—Å"]]
seven_station = ["1886", "–î–æ–º –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞", "–í–æ—â–∏–Ω—ã–π –∑–∞–≤–æ–¥. –î—É–¥–∫–æ", "–°–ø–∞—Å–æ-–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∞—è",
                 "–í —á–µ—Å—Ç—å –∂–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞ - –ï–≤–≥–µ–Ω–∏–∏", "—à—Ç–∞–± –≥–µ–Ω–µ—Ä–∞–ª–∞ –ú–æ–ª—á–∞–Ω–æ–≤–∞"]


@katana.message_handler(commands=["start"], state=None)
async def start(message):
    first_name = message.chat.first_name
    username = message.chat.username
    msg_id = message.chat.id
    cur.execute("INSERT INTO data (tg_id, tg_tag, tg_name) VALUES (?, ?, ?)", (msg_id, username, first_name))
    conn.commit()
    row = cur.execute("SELECT * FROM data WHERE tg_id = ?", (msg_id,)).fetchone()
    if row[4] is None:
        await bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –§–ò–û‚§µ</b>", parse_mode="HTML")
        await FSM.fio.set()
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_quest = KeyboardButton("–ù–∞—á–∞—Ç—åüîì")
        markup.add(start_quest)
        await bot.send_message(msg_id, "<b>–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚§µ</b>", parse_mode="HTML",
                               reply_markup=markup)


@katana.message_handler(commands=["two_station"], state=None)
async def two(message):
    row = cur.execute("SELECT twostat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ2. '–ó–ê–ì–ê–î–û–ß–ù–ê–Ø'</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ñ—Ä–∞–∑–∞/—á–∏—Å–ª–æ\n—Ñ—Ä–∞–∑–∞/—á–∏—Å–ª–æ\n</b>\n "
                                                "P.S. / - –∏–ª–∏", parse_mode="HTML")
        await FSM.two_station.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")


@katana.message_handler(commands=["three_station"], state=None)
async def two(message):
    row = cur.execute("SELECT threestat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ3. '–ü–û–†–¢–†–ï–¢–ù–ê–Ø –ì–ê–õ–õ–ï–†–ï–Ø'</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞</b>\n ",
                               parse_mode="HTML")
        await FSM.three_station.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")


@katana.message_handler(commands=["four_station"], state=None)
async def two(message):
    row = cur.execute("SELECT fourstat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ4</b>\n"
                                                "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ1</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–æ</b>\n "
                                                "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
        await FSM.four_station_1.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")


@katana.message_handler(commands=["five_station"], state=None)
async def two(message):
    row = cur.execute("SELECT fivestat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ5</b>\n"
                                                "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ1</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –±—É–∫–≤–∞-–±—É–∫–≤–∞-–±—É–∫–≤–∞</b>\n "
                                                "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
        await FSM.five_station_1.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")


@katana.message_handler(commands=["six_station"], state=None)
async def two(message):
    row = cur.execute("SELECT sixstat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ6</b>\n"
                                                "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ1</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞</b>\n "
                                                "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
        await FSM.six_station_1.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")


@katana.message_handler(commands=["seven_station"], state=None)
async def two(message):
    row = cur.execute("SELECT sevenstat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
    print(row)
    if row[0] is None or row[0] == 0:
        await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ7</b>\n"
                                                "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ñ—Ä–∞–∑–∞/—á–∏—Å–ª–æ\n—Ñ—Ä–∞–∑–∞/—á–∏—Å–ª–æ\n</b>\n "
                                                "P.S. / - –∏–ª–∏", parse_mode="HTML")
        await FSM.seven_station.set()
    else:
        await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>", parse_mode="HTML")
@katana.message_handler(commands=["drop_data"], state=None)
async def drop(message):
    row = cur.execute("SELECT * FROM data").fetchall()
    for i in range(len(row)):
        await bot.send_message(message.chat.id, row[i])


@katana.message_handler(content_types=["text"], state=None)
async def text(message):
    if message.text == "–ù–∞—á–∞—Ç—åüîì":
        row = cur.execute("SELECT onestat FROM data WHERE tg_id = ?", (message.chat.id,)).fetchone()
        print(row)
        if row[0] is None or row[0] == 0:
            await bot.send_message(message.chat.id, "<b>–°–¢–ê–ù–¶–ò–Ø ‚Ññ1. '–£–ì–ê–î–ê–ô–ö–ê-–ö–ê'</b>\n"
                                                    "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ - 1:2:3:4:5</b>\n "
                                                    "P.S. –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞", parse_mode="HTML")
            await FSM.one_station.set()
        else:
            await bot.send_message(message.chat.id, "<b>–£–ø—Å—Å...–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é)üö∂üèº</b>",
                                   parse_mode="HTML")


@katana.message_handler(state=FSM.one_station)
async def start_data(message, state: FSMContext):
    one_stationn = message.text
    await state.update_data(one_station=one_stationn)
    data = await state.get_data()
    one_station_data = data.get('one_station')
    one_station_answer = one_station_data.split(":")
    print(one_station)
    print(one_station_answer)
    one_station_answer_zip = zip(one_station, one_station_answer)
    one_station_answer_list = list(one_station_answer_zip)
    for i in range(len(one_station_answer_list)):
        if one_station_answer_list[i][0] == one_station_answer_list[i][1]:
            cur.execute("UPDATE data SET onestat = onestat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /two_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.two_station)
async def start_data(message, state: FSMContext):
    two_stationn = message.text
    await state.update_data(two_station=two_stationn)
    data = await state.get_data()
    two_station_data = data.get('two_station')
    two_station_answer = two_station_data.split("\n")
    print(two_station)
    print(two_station_answer)
    two_station_answer_zip = zip(two_station, two_station_answer)
    two_station_answer_list = list(two_station_answer_zip)
    for i in range(len(two_station_answer_list)):
        if two_station_answer_list[i][1] in two_station_answer_list[i][0]:
            cur.execute("UPDATE data SET twostat = twostat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /three_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.three_station)
async def start_data(message, state: FSMContext):
    three_stationn = message.text
    await state.update_data(three_station=three_stationn)
    data = await state.get_data()
    three_station_data = data.get('three_station')
    three_station_answer = three_station_data.split("\n")
    print(three_station)
    print(three_station_answer)
    three_station_answer_zip = zip(three_station, three_station_answer)
    three_station_answer_list = list(three_station_answer_zip)
    for i in range(len(three_station_answer_list)):
        if three_station_answer_list[i][1] in three_station_answer_list[i][0]:
            cur.execute("UPDATE data SET threestat = threestat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /four_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.four_station_1)
async def start_data(message, state: FSMContext):
    four_station_1n = message.text
    await state.update_data(four_station_1=four_station_1n)
    data = await state.get_data()
    four_station_1_data = data.get('four_station_1')
    four_station_1_answer = four_station_1_data.split("\n")
    print(four_station[0])
    print(four_station_1_answer)
    four_station_1_answer_zip = zip(four_station[0], four_station_1_answer)
    four_station_1_answer_list = list(four_station_1_answer_zip)
    for i in range(len(four_station_1_answer_list)):
        if four_station_1_answer_list[i][1] == four_station_1_answer_list[i][0]:
            cur.execute("UPDATE data SET fourstat = fourstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id, "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ2</b>\n"
                                            "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–æ</b>\n "
                                            "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
    await FSM.four_station_2.set()


@katana.message_handler(state=FSM.four_station_2)
async def start_data(message, state: FSMContext):
    four_station_2n = message.text
    await state.update_data(four_station_2=four_station_2n)
    data = await state.get_data()
    four_station_2_data = data.get('four_station_2')
    four_station_2_answer = four_station_2_data.split("\n")
    print(four_station[1])
    print(four_station_2_answer)
    four_station_2_answer_zip = zip(four_station[1], four_station_2_answer)
    four_station_2_answer_list = list(four_station_2_answer_zip)
    for i in range(len(four_station_2_answer_list)):
        if four_station_2_answer_list[i][1] == four_station_2_answer_list[i][0]:
            cur.execute("UPDATE data SET fourstat = fourstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /five_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.five_station_1)
async def start_data(message, state: FSMContext):
    five_station_1n = message.text
    await state.update_data(five_station_1=five_station_1n)
    data = await state.get_data()
    five_station_1_data = data.get('five_station_1')
    five_station_1_answer = five_station_1_data.split("-")
    print(five_station[0])
    print(five_station_1_answer)
    five_station_1_answer_zip = zip(five_station[0], five_station_1_answer)
    five_station_1_answer_list = list(five_station_1_answer_zip)
    for i in range(len(five_station_1_answer_list)):
        if five_station_1_answer_list[i][1] == five_station_1_answer_list[i][0]:
            cur.execute("UPDATE data SET fivestat = fivestat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id, "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ2</b>\n"
                                            "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ë—É–∫–≤–∞-–ë—É–∫–≤–∞-–ë—É–∫–≤–∞</b>\n "
                                            "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
    await FSM.five_station_2.set()


@katana.message_handler(state=FSM.five_station_2)
async def start_data(message, state: FSMContext):
    five_station_2n = message.text
    await state.update_data(five_station_2=five_station_2n)
    data = await state.get_data()
    five_station_2_data = data.get('five_station_2')
    five_station_2_answer = five_station_2_data.split("-")
    print(five_station[1])
    print(five_station_2_answer)
    five_station_2_answer_zip = zip(five_station[1], five_station_2_answer)
    five_station_2_answer_list = list(five_station_2_answer_zip)
    for i in range(len(five_station_2_answer_list)):
        if five_station_2_answer_list[i][1] == five_station_2_answer_list[i][0]:
            cur.execute("UPDATE data SET fivestat = fourstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /six_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.six_station_1)
async def start_data(message, state: FSMContext):
    six_station_1n = message.text
    await state.update_data(six_station_1=six_station_1n)
    data = await state.get_data()
    six_station_1_data = data.get('six_station_1')
    six_station_1_answer = six_station_1_data.split("\n")
    print(six_station[0])
    print(six_station_1_answer)
    six_station_1_answer_zip = zip(six_station[0], six_station_1_answer)
    six_station_1_answer_list = list(six_station_1_answer_zip)
    for i in range(len(six_station_1_answer_list)):
        if six_station_1_answer_list[i][1] == six_station_1_answer_list[i][0]:
            cur.execute("UPDATE data SET sixstat = sixstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id, "<b>–ó–ê–î–ê–ù–ò–ï ‚Ññ2</b>\n"
                                            "<b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞\n—Ñ—Ä–∞–∑–∞</b>\n "
                                            "P.S. –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∑–∞ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ!", parse_mode="HTML")
    await FSM.six_station_2.set()


@katana.message_handler(state=FSM.six_station_2)
async def start_data(message, state: FSMContext):
    six_station_2n = message.text
    await state.update_data(six_station_2=six_station_2n)
    data = await state.get_data()
    six_station_2_data = data.get('six_station_2')
    six_station_2_answer = six_station_2_data.split("\n")
    print(six_station[1])
    print(six_station_2_answer)
    six_station_2_answer_zip = zip(six_station[1], six_station_2_answer)
    six_station_2_answer_list = list(six_station_2_answer_zip)
    for i in range(len(six_station_2_answer_list)):
        if six_station_2_answer_list[i][1] == six_station_2_answer_list[i][0]:
            cur.execute("UPDATE data SET sixstat = sixstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /seven_station",
                           parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.seven_station)
async def start_data(message, state: FSMContext):
    seven_stationn = message.text
    await state.update_data(seven_station=seven_stationn)
    data = await state.get_data()
    seven_station_data = data.get('seven_station')
    seven_station_answer = seven_station_data.split("\n")
    print(seven_station)
    print(seven_station_answer)
    seven_station_answer_zip = zip(seven_station, seven_station_answer)
    seven_station_answer_list = list(seven_station_answer_zip)
    for i in range(len(seven_station_answer_list)):
        if seven_station_answer_list[i][1] in seven_station_answer_list[i][0]:
            cur.execute("UPDATE data SET sevenstat = sevenstat + 1 WHERE tg_id = ?", (message.chat.id,))
            conn.commit()
        else:
            pass
    roww = cur.execute(
        "SELECT onestat, twostat, threestat, fourstat, fivestat, sixstat, sevenstat  FROM data WHERE tg_id = ?",
        (message.chat.id,)).fetchone()
    row_sum = 0
    for i in range(len(roww)):
        row_sum += roww[i]
    cur.execute("UPDATE data SET allstat = ? WHERE tg_id = ?", (row_sum, message.chat.id))
    conn.commit()
    row = cur.execute(
        "SELECT onestat, twostat, threestat, fourstat, fivestat, sixstat, sevenstat, allstat  FROM data WHERE tg_id = ?",
        (message.chat.id,)).fetchone()

    await bot.send_message(message.chat.id,
                           "<b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>‚úÖ \n–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏–µüíû\n"
                           "<b>–ß–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –≤–∞–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞—à–∏ –±–∞–ª–ª—ã</b>(–º–µ—Å—Ç–æ –±—É–¥–µ—Ç –æ–≥–ª–∞—à–µ–Ω–æ —á—É—Ç—å –ø–æ–∑–∂–µ)\n",
                           parse_mode="HTML")
    await bot.send_message(message.chat.id, f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ1: </b>{row[0]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ2: </b>{row[1]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ3: </b>{row[2]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ4: </b>{row[3]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ5: </b>{row[4]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ6: </b>{row[5]}\n"
                                            f"<b>–°—Ç–∞–Ω—Ü–∏—è ‚Ññ7: </b>{row[6]}\n"
                                            f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤: </b>{row[7]}\n",
                           parse_mode="HTML")
    await bot.send_message(message.chat.id, "<code>–ü–æ –≤—Å–µ–º —Ç–µ—Ö. –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ</code> - @katana_tm", parse_mode="HTML")
    await state.finish()


@katana.message_handler(state=FSM.fio)
async def start_data(message, state: FSMContext):
    fio = message.text
    await state.update_data(fio=fio)
    await bot.send_message(message.chat.id, "<b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å‚§µ", parse_mode="HTML")
    await FSM.rank.set()


@katana.message_handler(state=FSM.rank)
async def start_data(message, state: FSMContext):
    first_name = message.chat.first_name
    username = message.chat.username
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_quest = KeyboardButton("–ù–∞—á–∞—Ç—åüîì")
    markup.add(start_quest)
    msg_id = message.chat.id
    rank = message.text
    await state.update_data(rank=rank)
    data = await state.get_data()
    fio = data.get('fio')
    rank = data.get('rank')
    cur.execute("UPDATE data SET fio = ?, rank = ? WHERE tg_id = ?", (fio, rank, msg_id,))
    conn.commit()
    await bot.send_message(-1001817537217, f"<b>{first_name}(@{username}) - –ü—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚úÖ</b>", parse_mode="HTML")
    await bot.send_message(message.chat.id, "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ‚úÖ \n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                           parse_mode="HTML", reply_markup=markup)
    await state.finish()


executor.start_polling(katana)
